# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import dataset_pb2 as dataset__pb2


class DataSetUploaderStub(object):
    """The DataSetUploader service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadSample = channel.unary_unary(
                '/dataset.DataSetUploader/UploadSample',
                request_serializer=dataset__pb2.UploadSampleRequest.SerializeToString,
                response_deserializer=dataset__pb2.CommonReply.FromString,
                )
        self.UploadSampleLabel = channel.unary_unary(
                '/dataset.DataSetUploader/UploadSampleLabel',
                request_serializer=dataset__pb2.UploadSampleLabelRequest.SerializeToString,
                response_deserializer=dataset__pb2.CommonReply.FromString,
                )
        self.UploadProgress = channel.unary_unary(
                '/dataset.DataSetUploader/UploadProgress',
                request_serializer=dataset__pb2.UploadProgressRequest.SerializeToString,
                response_deserializer=dataset__pb2.CommonReply.FromString,
                )
        self.UploadNotify = channel.unary_unary(
                '/dataset.DataSetUploader/UploadNotify',
                request_serializer=dataset__pb2.UploadNotifyRequest.SerializeToString,
                response_deserializer=dataset__pb2.CommonReply.FromString,
                )


class DataSetUploaderServicer(object):
    """The DataSetUploader service definition.
    """

    def UploadSample(self, request, context):
        """upload sample image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadSampleLabel(self, request, context):
        """upload sample labels
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadProgress(self, request, context):
        """upload progress
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadNotify(self, request, context):
        """upload notify
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataSetUploaderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadSample': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadSample,
                    request_deserializer=dataset__pb2.UploadSampleRequest.FromString,
                    response_serializer=dataset__pb2.CommonReply.SerializeToString,
            ),
            'UploadSampleLabel': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadSampleLabel,
                    request_deserializer=dataset__pb2.UploadSampleLabelRequest.FromString,
                    response_serializer=dataset__pb2.CommonReply.SerializeToString,
            ),
            'UploadProgress': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadProgress,
                    request_deserializer=dataset__pb2.UploadProgressRequest.FromString,
                    response_serializer=dataset__pb2.CommonReply.SerializeToString,
            ),
            'UploadNotify': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadNotify,
                    request_deserializer=dataset__pb2.UploadNotifyRequest.FromString,
                    response_serializer=dataset__pb2.CommonReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dataset.DataSetUploader', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataSetUploader(object):
    """The DataSetUploader service definition.
    """

    @staticmethod
    def UploadSample(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dataset.DataSetUploader/UploadSample',
            dataset__pb2.UploadSampleRequest.SerializeToString,
            dataset__pb2.CommonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadSampleLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dataset.DataSetUploader/UploadSampleLabel',
            dataset__pb2.UploadSampleLabelRequest.SerializeToString,
            dataset__pb2.CommonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadProgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dataset.DataSetUploader/UploadProgress',
            dataset__pb2.UploadProgressRequest.SerializeToString,
            dataset__pb2.CommonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadNotify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dataset.DataSetUploader/UploadNotify',
            dataset__pb2.UploadNotifyRequest.SerializeToString,
            dataset__pb2.CommonReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
